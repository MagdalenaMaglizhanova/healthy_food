import streamlit as st
import easyocr
import numpy as np
from PIL import Image
import cv2
import pytesseract
import re

# –í—Ä–µ–¥–Ω–∏ –ï-–Ω–æ–º–µ—Ä–∞
harmful_e_numbers = {
    "E407": "–ö–∞—Ä–∞–≥–µ–Ω–∞–Ω (–≤—ä–∑–ø–∞–ª–µ–Ω–∏—è, —Ö—Ä–∞–Ω–æ—Å–º–∏–ª–∞—Ç–µ–ª–Ω–∏ –ø—Ä–æ–±–ª–µ–º–∏)",
    "E621": "–ù–∞—Ç—Ä–∏–µ–≤ –≥–ª—É—Ç–∞–º–∞—Ç (–≥–ª–∞–≤–æ–±–æ–ª–∏–µ, –∞–ª–µ—Ä–≥–∏–∏)",
    "E262": "–ù–∞—Ç—Ä–∏–µ–≤ –∞—Ü–µ—Ç–∞—Ç (–¥—Ä–∞–∑–Ω–∏ —Å—Ç–æ–º–∞—Ö–∞)",
    "E300": "–ê—Å–∫–æ—Ä–±–∏–Ω–æ–≤–∞ –∫–∏—Å–µ–ª–∏–Ω–∞ (–≤ –≥–æ–ª–µ–º–∏ –¥–æ–∑–∏ –¥—Ä–∞–∑–Ω–∏ —Å—Ç–æ–º–∞—Ö–∞)",
    "E330": "–õ–∏–º–æ–Ω–µ–Ω–∞ –∫–∏—Å–µ–ª–∏–Ω–∞ (—É–≤—Ä–µ–∂–¥–∞ –∑—ä–±–Ω–∏—è –µ–º–∞–π–ª)",
    "E250": "–ù–∞—Ç—Ä–∏–µ–≤ –Ω–∏—Ç—Ä–∏—Ç (—Ä–∏—Å–∫ –æ—Ç —Ä–∞–∫, –≤ –º–µ—Å–æ)",
}

harmful_keywords = {
    "–Ω–∏—Ç—Ä–∏—Ç": "–ù–∞—Ç—Ä–∏–µ–≤ –Ω–∏—Ç—Ä–∏—Ç ‚Äì –∏–∑–ø–æ–ª–∑–≤–∞ —Å–µ –≤ –º–µ—Å–∞, —Å–≤—ä—Ä–∑–∞–Ω –µ —Å —Ä–∞–∫",
    "–≥–ª—É—Ç–∞–º–∞—Ç": "–ù–∞—Ç—Ä–∏–µ–≤ –≥–ª—É—Ç–∞–º–∞—Ç ‚Äì –º–æ–∂–µ –¥–∞ –ø—Ä–µ–¥–∏–∑–≤–∏–∫–∞ –≥–ª–∞–≤–æ–±–æ–ª–∏–µ –∏ –∞–ª–µ—Ä–≥–∏–∏",
    "–∫–∞—Ä–∞–≥–∏–Ω–∞–Ω": "–ö–∞—Ä–∞–≥–µ–Ω–∞–Ω ‚Äì —Å–≤—ä—Ä–∑–∞–Ω —Å –≤—ä–∑–ø–∞–ª–µ–Ω–∏—è –≤ —á–µ—Ä–≤–∞—Ç–∞",
    "—Ñ–æ—Å—Ñ–∞—Ç": "–§–æ—Å—Ñ–∞—Ç–∏ ‚Äì –º–æ–≥–∞—Ç –¥–∞ –≤–ª–∏—è—è—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ –Ω–∞ –±—ä–±—Ä–µ—Ü–∏—Ç–µ",
    "–∫–æ–Ω—Å–µ—Ä–≤–∞–Ω": "–ö–æ–Ω—Å–µ—Ä–≤–∞–Ω—Ç–∏ ‚Äì —á–µ—Å—Ç–æ —Å—ä–¥—ä—Ä–∂–∞—Ç –Ω–∏—Ç—Ä–∞—Ç–∏ –∏–ª–∏ —Å—É–ª—Ñ–∏—Ç–∏",
    "–ª–∞–∫—Ç–æ–∑–∞": "–õ–∞–∫—Ç–æ–∑–∞ ‚Äì –º–æ–∂–µ –¥–∞ –ø—Ä–∏—á–∏–Ω–∏ —Å—Ç–æ–º–∞—à–µ–Ω –¥–∏—Å–∫–æ–º—Ñ–æ—Ä—Ç –ø—Ä–∏ –Ω–µ–ø–æ–Ω–æ—Å–∏–º–æ—Å—Ç",
}

food_categories = {
    "–ª—É–∫–∞–Ω–∫–∞": "–ø—Ä–µ—Ä–∞–±–æ—Ç–µ–Ω–æ –º–µ—Å–æ",
    "—Å–∞–ª–∞–º": "–ø—Ä–µ—Ä–∞–±–æ—Ç–µ–Ω–æ –º–µ—Å–æ",
    "–Ω–∞–¥–µ–Ω–∏—Ü–∞": "–ø—Ä–µ—Ä–∞–±–æ—Ç–µ–Ω–æ –º–µ—Å–æ",
    "—Å—É–¥–∂—É–∫": "–ø—Ä–µ—Ä–∞–±–æ—Ç–µ–Ω–æ –º–µ—Å–æ",
    "–ø–∞—Å—Ç–µ—Ç": "–ø—Ä–µ—Ä–∞–±–æ—Ç–µ–Ω–æ –º–µ—Å–æ",
    "—Å–∏—Ä–µ–Ω–µ": "–º–ª–µ—á–µ–Ω –ø—Ä–æ–¥—É–∫—Ç",
    "–∫–∞—à–∫–∞–≤–∞–ª": "–º–ª–µ—á–µ–Ω –ø—Ä–æ–¥—É–∫—Ç",
}

category_alternatives = {
    "–ø—Ä–µ—Ä–∞–±–æ—Ç–µ–Ω–æ –º–µ—Å–æ": [
        "ü•ó –í–º–µ—Å—Ç–æ –∫–æ–ª–±–∞—Å ‚Äì –ø–µ—á–µ–Ω–æ –ø–∏–ª–µ—à–∫–æ —Ñ–∏–ª–µ —Å –ø–æ–¥–ø—Ä–∞–≤–∫–∏.",
        "üçõ –õ–µ—â–∞ —è—Ö–Ω–∏—è —Å –º–æ—Ä–∫–æ–≤–∏ –∏ –ø–æ–¥–ø—Ä–∞–≤–∫–∏.",
        "ü•ö –Ø–π—Ü–∞ —Å –∞–≤–æ–∫–∞–¥–æ –∏ —Å–≤–µ–∂–∏ –∑–µ–ª–µ–Ω—á—É—Ü–∏.",
    ],
    "–º–ª–µ—á–µ–Ω –ø—Ä–æ–¥—É–∫—Ç": [
        "ü•• –í–µ–≥–∞–Ω —Å–∏—Ä–µ–Ω–µ –æ—Ç –∫–∞—à—É.",
        "üßÑ –¢–æ—Ñ—É —Å –±–∏–ª–∫–∏ ‚Äì –∏–¥–µ–∞–ª–Ω–æ –∑–∞ —Å–∞–ª–∞—Ç–∞.",
    ]
}

st.title("üì∏ –ó–∞–≤—ä—Ä—Ç–∞–Ω–µ + OCR –Ω–∞ –µ—Ç–∏–∫–µ—Ç + —Å—ä—Å—Ç–∞–≤–∫–∏ –∏ –∞–ª—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∏")

uploaded_file = st.file_uploader("–ö–∞—á–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –µ—Ç–∏–∫–µ—Ç:", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    image = Image.open(uploaded_file).convert("RGB")
    image_np = np.array(image)
    image_cv = cv2.cvtColor(image_np, cv2.COLOR_RGB2BGR)

    # –ó–∞–≤—ä—Ä—Ç–∞–Ω–µ —Å pytesseract
    gray = cv2.cvtColor(image_cv, cv2.COLOR_BGR2GRAY)
    osd = pytesseract.image_to_osd(gray)
    rotation = int(re.search(r'(?<=Rotate: )\d+', osd).group(0))

    if rotation != 0:
        # –ó–∞–≤—ä—Ä—Ç–∞–º–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ—Ç–æ
        if rotation == 90:
            rotated = cv2.rotate(image_cv, cv2.ROTATE_90_CLOCKWISE)
        elif rotation == 180:
            rotated = cv2.rotate(image_cv, cv2.ROTATE_180)
        elif rotation == 270:
            rotated = cv2.rotate(image_cv, cv2.ROTATE_90_COUNTERCLOCKWISE)
        else:
            rotated = image_cv
    else:
        rotated = image_cv

    # –ü–æ–∫–∞–∂–∏ –∑–∞–≤—ä—Ä—Ç—è–Ω–æ—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    st.image(rotated, caption="üîÑ –ó–∞–≤—ä—Ä—Ç—è–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", channels="BGR", use_column_width=True)

    # OCR —Å EasyOCR
    reader = easyocr.Reader(['bg', 'en'])
    results = reader.readtext(rotated)

    st.subheader("üìÑ –†–∞–∑–ø–æ–∑–Ω–∞—Ç —Ç–µ–∫—Å—Ç:")
    full_text = ""
    for _, text, conf in results:
        st.write(f"- {text} (—Ç–æ—á–Ω–æ—Å—Ç: {conf:.2f})")
        full_text += text + " "

    full_text_lower = full_text.lower()
    report_lines = []

    # –í—Ä–µ–¥–Ω–∏ E-–∫–æ–¥–æ–≤–µ
    st.subheader("üß™ –í—Ä–µ–¥–Ω–∏ —Å—ä—Å—Ç–∞–≤–∫–∏ (E-–Ω–æ–º–µ—Ä–∞):")
    found = []
    for e, desc in harmful_e_numbers.items():
        if e.lower() in full_text_lower:
            st.error(f"{e} - {desc}")
            found.append(f"{e} - {desc}")

    if not found:
        st.success("‚úÖ –ù—è–º–∞ –æ—Ç–∫—Ä–∏—Ç–∏ –≤—Ä–µ–¥–Ω–∏ E-–Ω–æ–º–µ—Ä–∞.")
        report_lines.append("–ù—è–º–∞ –æ—Ç–∫—Ä–∏—Ç–∏ –≤—Ä–µ–¥–Ω–∏ E-–Ω–æ–º–µ—Ä–∞.")
    else:
        report_lines.append("–û—Ç–∫—Ä–∏—Ç–∏ –≤—Ä–µ–¥–Ω–∏ E-–Ω–æ–º–µ—Ä–∞:")
        report_lines.extend(found)

    # –í—Ä–µ–¥–Ω–∏ –¥—É–º–∏
    st.subheader("üß¨ –ó–∞—Å–µ—á–µ–Ω–∏ —Å—ä—Å—Ç–∞–≤–∫–∏ (–ø–æ –¥—É–º–∞):")
    keyword_found = []
    for word, desc in harmful_keywords.items():
        if word in full_text_lower:
            st.warning(f"‚ö†Ô∏è {word} ‚Äì {desc}")
            keyword_found.append(f"{word} ‚Äì {desc}")

    if not keyword_found:
        st.success("‚úÖ –ù—è–º–∞ –∑–∞—Å–µ—á–µ–Ω–∏ –≤—Ä–µ–¥–Ω–∏ –¥—É–º–∏.")
        report_lines.append("–ù—è–º–∞ –∑–∞—Å–µ—á–µ–Ω–∏ —Å—ä—Å—Ç–∞–≤–∫–∏ –ø–æ –∫–ª—é—á–æ–≤–∏ –¥—É–º–∏.")
    else:
        report_lines.append("–ó–∞—Å–µ—á–µ–Ω–∏ —Å—ä—Å—Ç–∞–≤–∫–∏ –ø–æ –¥—É–º–∞:")
        report_lines.extend(keyword_found)

    # –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ö—Ä–∞–Ω–∞
    product_category = None
    for k, v in food_categories.items():
        if k in full_text_lower:
            product_category = v
            break

    if (found or keyword_found) and product_category:
        st.subheader(f"üçΩ –ê–ª—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∏ –Ω–∞ {product_category.capitalize()}:")
        for alt in category_alternatives.get(product_category, []):
            st.info(alt)

    # –ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –æ—Ç—á–µ—Ç
    st.subheader("üì• –ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω –æ—Ç—á–µ—Ç:")
    report_text = "üìÑ OCR –æ—Ç—á–µ—Ç –∑–∞ –µ—Ç–∏–∫–µ—Ç–∞:\n\n"
    report_text += "–†–ê–ó–ü–û–ó–ù–ê–¢ –¢–ï–ö–°–¢:\n" + full_text + "\n\n"
    report_text += "\n".join(report_lines)
    st.download_button("‚¨áÔ∏è –ò–∑—Ç–µ–≥–ª–∏ –æ—Ç—á–µ—Ç", data=report_text.encode("utf-8"), file_name="ocr_otchet.txt", mime="text/plain")
